[{"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/index.tsx":"1","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/reportWebVitals.ts":"2","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/App.tsx":"3","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/services/axios.ts":"4","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/services/const.ts":"5","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/NavBar/NavBar.tsx":"6","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/ViewFeed/ViewFeed.tsx":"7","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/FeedList/FeedList.tsx":"8","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/CreateFeed/CreateFeed.tsx":"9","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/FeedItem/FeedItem.tsx":"10","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/DeleteFeed/DeleteFeed.tsx":"11","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/ToastContainer/ToastContainer.tsx":"12"},{"size":500,"mtime":1609119768357,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1609119768357,"results":"15","hashOfConfig":"14"},{"size":653,"mtime":1609326753013,"results":"16","hashOfConfig":"14"},{"size":375,"mtime":1609266250088,"results":"17","hashOfConfig":"14"},{"size":140,"mtime":1609322287523,"results":"18","hashOfConfig":"14"},{"size":461,"mtime":1609328855102,"results":"19","hashOfConfig":"14"},{"size":3938,"mtime":1609331060715,"results":"20","hashOfConfig":"14"},{"size":5335,"mtime":1609330595029,"results":"21","hashOfConfig":"14"},{"size":7300,"mtime":1609330720569,"results":"22","hashOfConfig":"14"},{"size":5936,"mtime":1609330995113,"results":"23","hashOfConfig":"14"},{"size":748,"mtime":1609266973499,"results":"24","hashOfConfig":"14"},{"size":625,"mtime":1609322450667,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"uqfn7s",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/index.tsx",[],["53","54"],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/reportWebVitals.ts",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/App.tsx",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/services/axios.ts",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/services/const.ts",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/NavBar/NavBar.tsx",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/ViewFeed/ViewFeed.tsx",["55"],"import { useEffect, useState } from 'react';\nimport { Card, Alert, Spinner } from 'react-bootstrap';\nimport RSSParser from 'rss-parser';\nimport { httpGet } from '../../services/axios';\nimport { useParams } from \"react-router-dom\";\nimport { CORS_PROXY } from '../../services/const';\n\nlet parser = new RSSParser();\n\nfunction ViewFeed() {\n    let { id } = useParams();\n    const [feedTitle, setFeedTitle]: [string, any] = useState('');\n    const [feedList, setFeedList]: [any, any] = useState([]);\n    const [textColor, setTextColor]: [any, any] = useState('');\n    const [headlineColor, setHeadlineColor]: [any, any] = useState('');\n    const [fontSize, setFontSize]: [any, any] = useState('10px');\n    const [height, setHeight]: [any, any] = useState('10px');\n    const [width, setWidth]: [any, any] = useState('10px');\n    const [show, setShow] = useState(false);\n    const [isLoading, setLoading]: [boolean, any] = useState(false);\n\n    const InvalidFeed = () => {\n\n        if (show) {\n            return (\n                <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n                    <Alert.Heading>Error!!</Alert.Heading>\n                    <p>\n                        Invalid feed or Feed url doesnot exist.\n              </p>\n                </Alert>\n            );\n        }\n        return null;\n    }\n\n    const fetchFeedDetails = (feedId) => {\n        httpGet(`feed/getFeed/${feedId}`)\n            .then((response) => {\n                const feed = response.data.feed;\n                fetchFeed(feed.url);\n                setTextColor(feed.textColor);\n                setHeadlineColor(feed.headlineColor);\n                setFontSize(feed.fontSize + 'px');\n                setHeight(feed.height + 'px');\n                setWidth(feed.width + 'px');\n            })\n            .catch((error) => {\n                // console.log(error);\n                setShow(true);\n                setLoading(false);\n            })\n    }\n\n    const fetchFeed = (url) => {\n        parser.parseURL(CORS_PROXY + url, (err, feed) => {\n            if (err) {\n                setShow(true);\n                setLoading(false);\n                throw err;\n            };\n            setFeedTitle(feed.title);\n            setFeedList(feed.items);\n            setLoading(false);\n        })\n    }\n\n    useEffect(() => {\n        setLoading(true);\n        fetchFeedDetails(id);\n    }, []);\n\n    return (\n        <div className=\"container\" style={{ overflow: 'hidden' }}>\n            <InvalidFeed />\n            <h1 className=\"center title\">\n                {feedTitle}\n            </h1>\n\n            {isLoading ?\n\n                <div className=\"col-12 text-center mt-5\">\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                </div>\n                :\n                feedList.map((item, index) => {\n                    return (\n                        <Card key={item.isoDate} className=\"my-2 shadow-card\"\n                            style={{\n                                width: width,\n                                height: height,\n                                fontSize: fontSize\n                            }}>\n                            <Card.Header style={{ color: headlineColor }}>{item.title}</Card.Header>\n                            <Card.Body>\n                                <div\n                                    style={{\n                                        color: textColor,\n                                    }}\n                                    dangerouslySetInnerHTML={{\n                                        __html: item.content,\n                                    }}>\n\n                                </div>\n                            </Card.Body>\n                        </Card>\n                    );\n                })}\n        </div>\n    )\n}\n\nexport default ViewFeed;","/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/FeedList/FeedList.tsx",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/CreateFeed/CreateFeed.tsx",[],["56","57"],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/FeedItem/FeedItem.tsx",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/DeleteFeed/DeleteFeed.tsx",[],"/home/nitheesh/Documents/Work/js/rss-feed/rss-feed-app/src/components/ToastContainer/ToastContainer.tsx",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":71,"column":8,"nodeType":"64","endLine":71,"endColumn":10,"suggestions":"65"},{"ruleId":"58","replacedBy":"66"},{"ruleId":"60","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchFeedDetails' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["70"],["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [fetchFeedDetails, id]",{"range":"73","text":"74"},[2390,2392],"[fetchFeedDetails, id]"]